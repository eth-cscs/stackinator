{% set spacejoiner = joiner(' ') %}
# vim: filetype=make

# Copy this file to Make.user and set some variables.

# This is the root of the software stack directory.
BUILD_ROOT := {{ build_path }}

# What Spack should we use?
SPACK := spack

# This uses the same spack, but ensures "plain" output.
# Useful when output has to be manipulated (e.g. build a usable path)
SPACK_HELPER := $(SPACK) --color=never

# The Spack installation root.
STORE := {{ store }}

# export as env vars (required by bwrap scripts)
export STORE := $(STORE)
export BUILD_ROOT := $(BUILD_ROOT)

# When already building inside a sandbox, use `SANDBOX :=` (empty string)
# Without a sandbox, make sure to hide sensitive data such as ~/.ssh through bubblewrap.
# Also bind the directories `./tmp -> /tmp` and `./store -> $(STORE)`, so that
# builds and installs happen inside the current directory. For speed, either
# put the project itself in-memory, or use a flag like --bind /dev/shm/store
# $(STORE). Use `bwrap-mutable-root.sh` in case you need to create a new
# directory at the root /.
SQFS_MOUNT := $(BUILD_ROOT)/squashfs-mount-wrapper.sh --build-root=$(BUILD_ROOT) --sqfs-images="{% for item in base_uenv %}{{ spacejoiner() }}{{ item.file }}:{{item.prefix_path}}{% endfor %}"
{% if no_bwrap %}
SANDBOX := $SQFS_MOUNT --
{% else %}
SANDBOX := $(SQFS_MOUNT) -- $(BUILD_ROOT)/bwrap-mutable-root.sh $\
	--tmpfs ~ $\
	--bind $(BUILD_ROOT)/tmp /tmp $\
  --bind $(BUILD_ROOT)/store $(STORE) $\
{% for item in base_uenv %}
	--bind $(BUILD_ROOT)/tmp/mounts/{{item.prefix_path}} {{item.prefix_path}} $\
{% endfor %}

SANDBOX_NO_BASE := $(BUILD_ROOT)/bwrap-mutable-root.sh $\
	--tmpfs ~ $\
	--bind $(BUILD_ROOT)/tmp /tmp $\
  -- $(BUILD_ROOT)/bwrap-store.sh
{% endif %}
# Makes sure that make -Orecurse continues to print in color.
export SPACK_COLOR := always

# Do not use user config, cause more often than not you pick up the wrong
# config files in ~/.spack. Note that our recommended bwrap setup already puts
# a tmpfs in the home folder, but when bwrap isn't used, this also helps a bit
# with reproducibility.
export SPACK_USER_CONFIG_PATH := ~

# Set up the system config scope that has the system packages we don't want
# build, for example slurm, pmix, etc. Also should have the system compiler.
export SPACK_SYSTEM_CONFIG_PATH := $(BUILD_ROOT)/config

# Put clingo and friends here...
export SPACK_USER_CACHE_PATH := $(BUILD_ROOT)/cache

# Output the full build log to stdout.
{% if verbose %}
export SPACK_INSTALL_FLAGS := --verbose
{% endif %}

# Reproducibility
export LC_ALL := en_US.UTF-8
export TZ := UTC

# I tried UNIX epoch 0 here, but it results in build errors with Python
# packages using wheels, since they rely on zipfiles, and zipfiles can only
# handle DOS epoch, which is the magic number below (1980-01-01).
export SOURCE_DATE_EPOCH := 315576060
